substitutions:
  devicename: sonoff-t3
  friendly_name:  "Sonoff T3"
  # blue led delay for actions
  delay_short: "1s"
  delay_long: "2s"
  delay_veryshort: "0.7s"
  # long press time (increase to >10 to mimic child-lock)
  long_press: "2s"
esphome:
  project:
    name: "HomeConnected.Sonoff T_series Wallswitch Multifunction"
    version: "2023.4.1b"
  name: $devicename
  friendly_name: $friendly_name
  on_boot:
    priority: -10
    then:
      - light.turn_on: blue_led_light
      - delay: 0.6s
      - light.turn_off: blue_led_light
      - delay: 0.6s
      - light.turn_on: blue_led_light
      - delay: 0.6s
      - light.turn_off: blue_led_light
      - delay: 0.6s
      - light.turn_on: blue_led_light
      - delay: 0.6s
      - light.turn_off: blue_led_light
esp8266:
  board: esp01_1m
  restore_from_flash: true
preferences:
  flash_write_interval: 1min
logger:
# disable logging IF we listen to RX (GPIO3) pin directly as a UART or need to free memory
  baud_rate: 0
api:
  password: !secret api_password  
ota:
  password: !secret ota_password
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${devicename} Fallback Hotspot"
    password: !secret api_password
captive_portal: # this is only to help connect to correct wi-fi
# if we use BLE Proxy function so web server must be donwn or need some memory
#web_server:
#  port: 80

## CONFIG ##
# NOTES: Touchpad lights are hardware connected to relays so, if you don't use relays then the touchpad lights will always be off
 # Touchpad lights will work normaly if relays are enabled, but the usefull output is Switch 1/2/3 virtual entities
 # Don't enable virtual entities manually, this is done by build-in automation. Use the sensors on the device instead.
 # USE: single click to on/off switch 1/2/3 ...or... push button 1/2/3 (button mode)
 # long click to enable/disable relay 1/2/3 to also function (also touchpad lights)
 # Choose if you want relay to unlock if disabled or not (admin setting initial on {unlocked})
 # If you choose not to unlock a relay and you enable it while switch is on then you can invert its function (relay on if switch is off and relay off if switch is on)
 # You can easily get confused if you mess up the controls and the config so be carefull (read above about this)
 # Double click to toggle button-mode function (this will also toggle switch mode by design)
binary_sensor:
  - platform: gpio
    name: "$friendly_name Touch 1"
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    on_multi_click:
    # short press
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                and:
                  - switch.is_on: relay1en
                  - switch.is_off: button1en
              then:
                - switch.toggle: relay1
                - switch.toggle: switch1
              else: 
              - if:
                 condition:
                   switch.is_on: button1en
                 then:
                   - button.press: button1
                 else:
                   - switch.toggle: switch1
          
          - light.turn_on: blue_led_light
          - delay: $delay_short
          - light.turn_off: blue_led_light
    # long press
      - timing:
          - ON for at least $long_press
        then:
          - switch.toggle: relay1en
          #- switch.turn_off: button3en
          - if:
              condition:
                switch.is_on: relay1un
              then:
                - switch.turn_off: relay1
          - light.turn_on: blue_led_light
          - delay: $delay_long
          - light.turn_off: blue_led_light
    # double click
    on_double_click:
      min_length: 50ms
      max_length: 350ms
      then:
        - switch.toggle: button1en
        #- switch.turn_off: relay1en
        - light.turn_on: blue_led_light
        - delay: $delay_veryshort
        - light.turn_off: blue_led_light
        - delay: $delay_veryshort
        - light.turn_on: blue_led_light
        - delay: $delay_veryshort
        - light.turn_off: blue_led_light
  - platform: gpio
    name: "$friendly_name Touch 2"
    pin:
      number: GPIO9
      inverted: true
      mode:
        input: true
        pullup: true
    on_multi_click:
    # short press
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                and:
                  - switch.is_on: relay2en
                  - switch.is_off: button2en
              then:
                - switch.toggle: relay2
                - switch.toggle: switch2
              else: 
              - if:
                 condition:
                   switch.is_on: button2en
                 then:
                   - button.press: button2
                 else:
                   - switch.toggle: switch2
          
          - light.turn_on: blue_led_light
          - delay: $delay_short
          - light.turn_off: blue_led_light
    # long press
      - timing:
          - ON for at least $long_press
        then:
          - switch.toggle: relay2en
          #- switch.turn_off: button2en
          - if:
              condition:
                switch.is_on: relay2un
              then:
                - switch.turn_off: relay2
          - light.turn_on: blue_led_light
          - delay: $delay_long
          - light.turn_off: blue_led_light
    # double click
    on_double_click:
      min_length: 50ms
      max_length: 350ms
      then:
        - switch.toggle: button2en
        #- switch.turn_off: relay2en
        - light.turn_on: blue_led_light
        - delay: $delay_veryshort
        - light.turn_off: blue_led_light
        - delay: $delay_veryshort
        - light.turn_on: blue_led_light
        - delay: $delay_veryshort
        - light.turn_off: blue_led_light
  - platform: gpio
    pin:
      number: GPIO10
      mode:
        input: true
        pullup: true
      inverted: true
    name: "$friendly_name Touch 3"
    on_multi_click:
    # short press
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                and:
                  - switch.is_on: relay3en
                  - switch.is_off: button3en
              then:
                - switch.toggle: relay3
                - switch.toggle: switch3
              else: 
              - if:
                 condition:
                   switch.is_on: button3en
                 then:
                   - button.press: button3
                 else:
                   - switch.toggle: switch3
          
          - light.turn_on: blue_led_light
          - delay: $delay_short
          - light.turn_off: blue_led_light
    # long press
      - timing:
          - ON for at least $long_press
        then:
          - switch.toggle: relay3en
          #- switch.turn_off: button3en
          - if:
              condition:
                switch.is_on: relay3un
              then:
                - switch.turn_off: relay3
          - light.turn_on: blue_led_light
          - delay: $delay_long
          - light.turn_off: blue_led_light
    # double click
    on_double_click:
      min_length: 50ms
      max_length: 350ms
      then:
        - switch.toggle: button3en
        #- switch.turn_off: relay3en
        - light.turn_on: blue_led_light
        - delay: $delay_veryshort
        - light.turn_off: blue_led_light
        - delay: $delay_veryshort
        - light.turn_on: blue_led_light
        - delay: $delay_veryshort
        - light.turn_off: blue_led_light

  # Connection Status 
  - platform: status
    name: "$friendly_name Status"

switch:
# Real hardware relays
  - platform: gpio
    name: "$friendly_name Relay 1"
    pin: GPIO12
    id: relay1
  - platform: gpio
    name: "$friendly_name Relay 2"
    pin: GPIO5
    id: relay2
  - platform: gpio
    name: "$friendly_name Relay 3"
    pin: GPIO4
    id: relay3

# Virtual switches for atomation use no matter if relays are enabled or not
  - platform: template
    name: "$friendly_name Switch 1"
    id: switch1
    optimistic: true
  - platform: template
    name: "$friendly_name Switch 2"
    id: switch2
    optimistic: true
  - platform: template
    name: "$friendly_name Switch 3"
    id: switch3
    optimistic: true    

# Virtual switches for enable relays function
  - platform: template
    name: "$friendly_name Enable Relay 1"
    id: relay1en
    optimistic: true
    entity_category: config
  - platform: template
    name: "$friendly_name Enable Relay 2"
    id: relay2en
    optimistic: true
    entity_category: config
  - platform: template
    name: "$friendly_name Enable Relay 3"
    id: relay3en
    optimistic: true
    entity_category: config

# Virtual switches to unlock relays if disabled
  - platform: template
    name: "$friendly_name Unlock Relay 1"
    id: relay1un
    optimistic: true
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON 
  - platform: template
    name: "$friendly_name Unlock Relay 2"
    id: relay2un
    optimistic: true
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON 
  - platform: template
    name: "$friendly_name Unlock Relay 3"
    id: relay3un
    optimistic: true   
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON 

# Virtual switches to enable button mode
  - platform: template
    name: "$friendly_name Button Mode 1"
    id: button1en
    optimistic: true
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF 
  - platform: template
    name: "$friendly_name Button Mode 2"
    id: button2en
    optimistic: true
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: template
    name: "$friendly_name Button Mode 3"
    id: button3en
    optimistic: true   
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF 

button:
# Virtual buttons for automations
  - platform: template
    name: "$friendly_name Button 1"
    id: button1
  - platform: template
    name: "$friendly_name Button 2"
    id: button2
  - platform: template
    name: "$friendly_name Button 3"
    id: button3

# Device reboot button
  - platform: restart
    name: "${friendly_name} Restart"   

output:
  - platform: esp8266_pwm
    id: blue_led
    pin: GPIO13
    inverted: true

light:
  - platform: monochromatic
    name: "$friendly_name Enable Status LED"
    output: blue_led
    id: blue_led_light
    entity_category: config

sensor:
# Diagnostic status of WI-FI signal
  - platform: wifi_signal
    name: "${friendly_name} Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic
# Diagnostic status of WI-FI signal in DB
  - platform: copy
    source_id: wifi_signal_db
    name: "${friendly_name} Signal %"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic
# Diagnostic status of device Uptime
  - platform: uptime
    name: "${friendly_name} Uptime"
    id: up_time
    update_interval: 60s
    entity_category: diagnostic
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(up_time).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

text_sensor:
# Device ESPHome Version Info
  - platform: version
    hide_timestamp: true
    name: "${friendly_name} ESPHome Version"
    entity_category: diagnostic
# Device Wi-Fi IP & SSID Info
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      icon: mdi:wifi
      entity_category: diagnostic
      update_interval: 60s
    ssid:
      name: "${friendly_name} Connected SSID"
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
      update_interval: 60s
# Device Uptime Readable Format
  - platform: template
    name: "${friendly_name} Uptime (Readable)"
    id: uptime_human
    icon: mdi:clock-start
    entity_category: diagnostic
